{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","onSubmit","htmlFor","type","id","value","onChange","required","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","className","identity","ref","autoPlay","muted","closeMic","Room","token","handleLogout","room","setRoom","participants","setParticipants","micState","setMicState","camState","setCamState","participantConnected","prevParticipants","participantDisconnected","p","Video","connect","name","then","forEach","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","remoteParticipants","key","sid","onClick","trackId","disable","enable","viseoTracks","getQuery","str","URL","window","location","href","searchParams","get","VideoChat","setUsername","setRoomName","setToken","useCallback","event","target","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","data","autoLogin","console","log","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4af02657.chunk.js","sourcesContent":["import React from 'react';\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Enter a room</h2>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"field\"\n          value={username}\n          onChange={handleUsernameChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"room\">Room name:</label>\n        <input\n          type=\"text\"\n          id=\"room\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          required\n        />\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = (trackMap) =>\n    Array.from(trackMap.values())\n      .map((publication) => publication.track)\n      .filter((track) => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n    const trackSubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\n      }\n    };\n\n    participant.on(\"trackSubscribed\", trackSubscribed);\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} muted={false} />\n    </div>\n  );\n};\n\nexport default Participant;\n","import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n\nconst openMic =\"פתח מיקרופון\";\nconst closeMic =\"סגור מיקרופון\";\nconst opeCam =\"פתח מצלמה\";\nconst closeCam =\"סגור מצלמה\";\n\nconst Room = ({ roomName, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [micState, setMicState] = useState(closeMic);\n  const [camState, setCamState] = useState(closeCam);\n\n  const toggleMic = () => {\n    room.localParticipant.audioTracks.forEach(function(trackId, track) {\n      if(micState == closeMic){\n        track.disable();\n      }\n      else{\n         track.enable();\n      }\n    });\n    if(micState == closeMic){\n      setMicState(openMic);\n    }\n    else{\n      setMicState(closeMic);\n    }\n  }\n\n  const toggleCam = () => {\n    room.localParticipant.viseoTracks.forEach(function(trackId, track) {\n      if(camState == closeCam){\n        track.disable();\n      }\n      else{\n         track.enable();\n      }\n    });\n    if(camState == closeCam){\n      setCamState(opeCam);\n    }\n    else{\n      setCamState(closeCam);\n    }\n  }\n\n  useEffect(() => {\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on('participantConnected', participantConnected);\n      room.on('participantDisconnected', participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n          currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };\n  }, [roomName, token]);\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n\n  return (\n    <div className=\"room\">\n      \n      <div>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          ''\n        )}\n      </div>\n      </div>\n      <div><h2>Meeting Id: {roomName}</h2>\n      {/* <button onClick={handleLogout}>Log out</button> */}\n      <span><button onClick={toggleMic}>{micState}</button></span><br/>\n      <span><button onClick={toggleCam}>{camState}</button></span>\n      </div>\n    </div>\n    \n  );\n};\n\nexport default Room;\n","import React, { useState, useCallback } from 'react';\nimport Lobby from './Lobby';\nimport Room from './Room';\nconst getQuery=(str)=>{\n  const current_url = new URL( window.location.href);\n  const search_params = current_url.searchParams;\n  return search_params.get(str);\n}\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      const data = await fetch('/video/token', {\n        method: 'POST',\n        body: JSON.stringify({\n          identity: username,\n          room: roomName\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    },\n    [roomName, username]\n  );\n\n  \n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n  const room = getQuery('roomName');\n  \n    const name = getQuery('name');\n    // setUsername(name);\n  \n   \n     const autoLogin = async () => {\n        const data = await fetch('/video/token', {\n          method: 'POST',\n          body: JSON.stringify({\n            identity: name,\n            room: room\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => res.json());\n        setToken(data.token);\n        // console.log(\"tokenData \"+data.token);\n      };\n  console.log(room + \" \"+ name);\n  if(room != null && name != null ) autoLogin();\n  let render;\n  if (token) {\n    render = (\n      <Room roomName={roomName} token={token} handleLogout={handleLogout} />\n    );\n  } else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      {/* <header>\n        <h1>Video Chat with Hooks</h1>\n      </header> */}\n      <main>\n        <VideoChat />\n      </main>\n      {/* <footer>\n        <p>\n          Made with{' '}\n          <span role=\"img\" aria-label=\"React\">\n            ⚛️\n          </span>{' '}\n          by <a href=\"https://twitter.com/philnash\">philnash</a>\n        </p>\n      </footer> */}\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}